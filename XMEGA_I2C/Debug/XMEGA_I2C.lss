
XMEGA_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000630  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00802000  00802000  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ac5  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036bf  00000000  00000000  000052bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca1  00000000  00000000  0000897c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00009620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b08  00000000  00000000  000097f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000746  00000000  00000000  0000c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000ca42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_46>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	ac 32       	cpi	r26, 0x2C	; 44
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
 220:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <xmega_RGBsensor_init>:
volatile unsigned char temp; //for debug

/********************************************************************************
						Functions
********************************************************************************/
void xmega_RGBsensor_init(void) {
 228:	0f 93       	push	r16
	// 1) Send the sensor I2C address and the write bit set
	// 2) Write the command register with the transaction mode and register address(es)
	// 3) Send the data for the register(s)
	// First turn everything on...
	//TWIEsendBuffer[0] = RGB_SENSOR_WRITE; // The first byte must always have TWI slave address.
	TWIEsendBuffer[0] = (0x80 | RGB_ENABLE_REGISTER_ADDRESS); // Where we gonna write
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f0 e2       	ldi	r31, 0x20	; 32
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	80 83       	st	Z, r24
	TWIEsendBuffer[1] = RGB_ENABLE_REGISTER_SETTING; // What we gonna write
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	81 83       	std	Z+1, r24	; 0x01
	// Two bytes to send, none to read:
	TWI_MasterWriteRead(&twiMaster, TWI_RGB_SENSOR_ADDRESS, &TWIEsendBuffer[0],2,0);
 236:	00 e0       	ldi	r16, 0x00	; 0
 238:	22 e0       	ldi	r18, 0x02	; 2
 23a:	af 01       	movw	r20, r30
 23c:	69 e2       	ldi	r22, 0x29	; 41
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	90 e2       	ldi	r25, 0x20	; 32
 242:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	while (!(twiMaster.status == TWIM_STATUS_READY))
 246:	ed e0       	ldi	r30, 0x0D	; 13
 248:	f0 e2       	ldi	r31, 0x20	; 32
 24a:	87 89       	ldd	r24, Z+23	; 0x17
 24c:	81 11       	cpse	r24, r1
 24e:	fd cf       	rjmp	.-6      	; 0x24a <xmega_RGBsensor_init+0x22>
	{
		//wait for the transaction to finish
	}
	// Now verify we're talking to the right device...set up a read of the chip ID:
	TWIEsendBuffer[0] = (0x80 | TCS34725_ID_ADDRESS); //  Address from which to read on the next transaction
 250:	82 e9       	ldi	r24, 0x92	; 146
 252:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	// One byte to send, one byte to read:
	TWI_MasterWriteRead(&twiMaster,	TWI_RGB_SENSOR_ADDRESS,	&TWIEsendBuffer[0],1,1);
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e2       	ldi	r21, 0x20	; 32
 25e:	69 e2       	ldi	r22, 0x29	; 41
 260:	8d e0       	ldi	r24, 0x0D	; 13
 262:	90 e2       	ldi	r25, 0x20	; 32
 264:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	// Wait for transaction to complete...
	while (!(twiMaster.status == TWIM_STATUS_READY)) { }
 268:	ed e0       	ldi	r30, 0x0D	; 13
 26a:	f0 e2       	ldi	r31, 0x20	; 32
 26c:	87 89       	ldd	r24, Z+23	; 0x17
 26e:	81 11       	cpse	r24, r1
 270:	fd cf       	rjmp	.-6      	; 0x26c <xmega_RGBsensor_init+0x44>
	// Note that the data we want is actually in twiMaster.readData, starting in location [0]
	if (!(twiMaster.readData[0]==0x44))
 272:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <twiMaster+0xb>
 276:	84 34       	cpi	r24, 0x44	; 68
 278:	21 f0       	breq	.+8      	; 0x282 <xmega_RGBsensor_init+0x5a>
	{
		temp=255; // We're talking to the wrong device!!
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <temp>
 280:	03 c0       	rjmp	.+6      	; 0x288 <xmega_RGBsensor_init+0x60>
	}
	else
	{
		temp=0xAD; // We're talking to the right device.
 282:	8d ea       	ldi	r24, 0xAD	; 173
 284:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <temp>
	}
	// Now set the light sensor integration time...
	TWIEsendBuffer[0] = (0x80 | TCS34725_ATIME_ADDRESS); // Where we gonna write
 288:	e0 e0       	ldi	r30, 0x00	; 0
 28a:	f0 e2       	ldi	r31, 0x20	; 32
 28c:	81 e8       	ldi	r24, 0x81	; 129
 28e:	80 83       	st	Z, r24
	TWIEsendBuffer[1] = TCS34725_INTEG_700MS; // What we gonna write
 290:	11 82       	std	Z+1, r1	; 0x01
	// Two bytes to send, none to read:
	TWI_MasterWriteRead(&twiMaster, TWI_RGB_SENSOR_ADDRESS, &TWIEsendBuffer[0],2,0);
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	22 e0       	ldi	r18, 0x02	; 2
 296:	af 01       	movw	r20, r30
 298:	69 e2       	ldi	r22, 0x29	; 41
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	90 e2       	ldi	r25, 0x20	; 32
 29e:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	// Wait for transaction to complete...
	while (!(twiMaster.status == TWIM_STATUS_READY)) {}
 2a2:	ed e0       	ldi	r30, 0x0D	; 13
 2a4:	f0 e2       	ldi	r31, 0x20	; 32
 2a6:	87 89       	ldd	r24, Z+23	; 0x17
 2a8:	81 11       	cpse	r24, r1
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <xmega_RGBsensor_init+0x7e>
	// Now set the light sensor gain
	TWIEsendBuffer[0] = (0x80 | TCS34725_CONTROL_ADDRESS); // Where we gonna write
 2ac:	e0 e0       	ldi	r30, 0x00	; 0
 2ae:	f0 e2       	ldi	r31, 0x20	; 32
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	80 83       	st	Z, r24
	TWIEsendBuffer[1] = TCS34725_GAIN_1X; // What we gonna write
 2b4:	11 82       	std	Z+1, r1	; 0x01
	// Two bytes to send, none to read:
	TWI_MasterWriteRead(&twiMaster, TWI_RGB_SENSOR_ADDRESS, &TWIEsendBuffer[0],2,0);
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	af 01       	movw	r20, r30
 2bc:	69 e2       	ldi	r22, 0x29	; 41
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	90 e2       	ldi	r25, 0x20	; 32
 2c2:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	// Wait for transaction to complete...
	while (!(twiMaster.status == TWIM_STATUS_READY)) {}
 2c6:	ed e0       	ldi	r30, 0x0D	; 13
 2c8:	f0 e2       	ldi	r31, 0x20	; 32
 2ca:	87 89       	ldd	r24, Z+23	; 0x17
 2cc:	81 11       	cpse	r24, r1
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <xmega_RGBsensor_init+0xa2>
	// To read the light sensor values,
	// 1) Send the sensor I2C address and write bit
	// 2) Set the command register with block (sequential) read and cdatal sensor address (low)
	// 3) send the sensor I2C address with the READ bit
	// 4) Read eight bytes of light sensor readings.
	TWIEsendBuffer[0] = (0x80 | TCS34725_CDATAL_ADDRESS);  // 0xA0 specifies sequential read
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	// one bytes to send, eight to read:
	TWI_MasterWriteRead(&twiMaster, TWI_RGB_SENSOR_ADDRESS, &TWIEsendBuffer[0],1,8);
 2d6:	08 e0       	ldi	r16, 0x08	; 8
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	50 e2       	ldi	r21, 0x20	; 32
 2de:	69 e2       	ldi	r22, 0x29	; 41
 2e0:	8d e0       	ldi	r24, 0x0D	; 13
 2e2:	90 e2       	ldi	r25, 0x20	; 32
 2e4:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	// Wait for transaction to complete...
	while (!(twiMaster.status == TWIM_STATUS_READY)) {}
 2e8:	ed e0       	ldi	r30, 0x0D	; 13
 2ea:	f0 e2       	ldi	r31, 0x20	; 32
 2ec:	87 89       	ldd	r24, Z+23	; 0x17
 2ee:	81 11       	cpse	r24, r1
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <xmega_RGBsensor_init+0xc4>
	//Transfer values to our variables....
	raw_clear = (twiMaster.readData[1]<<8)+twiMaster.readData[0];
 2f2:	ed e0       	ldi	r30, 0x0D	; 13
 2f4:	f0 e2       	ldi	r31, 0x20	; 32
 2f6:	84 85       	ldd	r24, Z+12	; 0x0c
 2f8:	23 85       	ldd	r18, Z+11	; 0x0b
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	98 2f       	mov	r25, r24
 2fe:	88 27       	eor	r24, r24
 300:	82 0f       	add	r24, r18
 302:	91 1d       	adc	r25, r1
 304:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <raw_clear>
 308:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <raw_clear+0x1>
	raw_red = (twiMaster.readData[3]<<8)+twiMaster.readData[2];
 30c:	86 85       	ldd	r24, Z+14	; 0x0e
 30e:	25 85       	ldd	r18, Z+13	; 0x0d
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	98 2f       	mov	r25, r24
 314:	88 27       	eor	r24, r24
 316:	82 0f       	add	r24, r18
 318:	91 1d       	adc	r25, r1
 31a:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <raw_red>
 31e:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <raw_red+0x1>
	raw_green = (twiMaster.readData[5]<<8)+twiMaster.readData[4];
 322:	80 89       	ldd	r24, Z+16	; 0x10
 324:	27 85       	ldd	r18, Z+15	; 0x0f
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	98 2f       	mov	r25, r24
 32a:	88 27       	eor	r24, r24
 32c:	82 0f       	add	r24, r18
 32e:	91 1d       	adc	r25, r1
 330:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <raw_green>
 334:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <raw_green+0x1>
	raw_blue = (twiMaster.readData[7]<<8)+twiMaster.readData[6];
 338:	82 89       	ldd	r24, Z+18	; 0x12
 33a:	21 89       	ldd	r18, Z+17	; 0x11
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	98 2f       	mov	r25, r24
 340:	88 27       	eor	r24, r24
 342:	82 0f       	add	r24, r18
 344:	91 1d       	adc	r25, r1
 346:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <raw_blue>
 34a:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <raw_blue+0x1>
	// The RGB sensor is now ready to read...
}
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <xmega_read_RGB_values>:

unsigned char xmega_read_RGB_values(void){
 352:	0f 93       	push	r16
	// and for the read part...note I don't have to reset the read address each time - it will always
	// start where the command buffer is pointing
	// No bytes to send, eight to read:
	TWI_MasterWriteRead(&twiMaster, TWI_RGB_SENSOR_ADDRESS, &TWIEsendBuffer[0],0,8);
 354:	08 e0       	ldi	r16, 0x08	; 8
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	50 e2       	ldi	r21, 0x20	; 32
 35c:	69 e2       	ldi	r22, 0x29	; 41
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	90 e2       	ldi	r25, 0x20	; 32
 362:	0e 94 48 02 	call	0x490	; 0x490 <TWI_MasterWriteRead>
	// Wait for transaction to complete...
	while (!(twiMaster.status == TWIM_STATUS_READY)) {}
 366:	ed e0       	ldi	r30, 0x0D	; 13
 368:	f0 e2       	ldi	r31, 0x20	; 32
 36a:	87 89       	ldd	r24, Z+23	; 0x17
 36c:	81 11       	cpse	r24, r1
 36e:	fd cf       	rjmp	.-6      	; 0x36a <xmega_read_RGB_values+0x18>
	//Transfer values to our variables....
	raw_clear = (twiMaster.readData[1]<<8)+twiMaster.readData[0];
 370:	ed e0       	ldi	r30, 0x0D	; 13
 372:	f0 e2       	ldi	r31, 0x20	; 32
 374:	84 85       	ldd	r24, Z+12	; 0x0c
 376:	23 85       	ldd	r18, Z+11	; 0x0b
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	98 2f       	mov	r25, r24
 37c:	88 27       	eor	r24, r24
 37e:	82 0f       	add	r24, r18
 380:	91 1d       	adc	r25, r1
 382:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <raw_clear>
 386:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <raw_clear+0x1>
	raw_red = (twiMaster.readData[3]<<8)+twiMaster.readData[2];
 38a:	86 85       	ldd	r24, Z+14	; 0x0e
 38c:	25 85       	ldd	r18, Z+13	; 0x0d
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	98 2f       	mov	r25, r24
 392:	88 27       	eor	r24, r24
 394:	82 0f       	add	r24, r18
 396:	91 1d       	adc	r25, r1
 398:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <raw_red>
 39c:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <raw_red+0x1>
	raw_green = (twiMaster.readData[5]<<8)+twiMaster.readData[4];
 3a0:	80 89       	ldd	r24, Z+16	; 0x10
 3a2:	27 85       	ldd	r18, Z+15	; 0x0f
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	98 2f       	mov	r25, r24
 3a8:	88 27       	eor	r24, r24
 3aa:	82 0f       	add	r24, r18
 3ac:	91 1d       	adc	r25, r1
 3ae:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <raw_green>
 3b2:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <raw_green+0x1>
	raw_blue = (twiMaster.readData[7]<<8)+twiMaster.readData[6];
 3b6:	82 89       	ldd	r24, Z+18	; 0x12
 3b8:	21 89       	ldd	r18, Z+17	; 0x11
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	98 2f       	mov	r25, r24
 3be:	88 27       	eor	r24, r24
 3c0:	82 0f       	add	r24, r18
 3c2:	91 1d       	adc	r25, r1
 3c4:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <raw_blue>
 3c8:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <raw_blue+0x1>
	return(twiMaster.status);
 3cc:	87 89       	ldd	r24, Z+23	; 0x17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <main>:
{
	// *************************************************************************
	//        Initialization code & device configuration
	// *************************************************************************
	// Configure the hardware, pins, and interrupt levels for the TWI I/F on Port E
	TWIE_initialization();
 3d2:	0e 94 22 02 	call	0x444	; 0x444 <TWIE_initialization>
	// enable global interrupts
	sei();
 3d6:	78 94       	sei
	// Now set up the RGB sensor
	xmega_RGBsensor_init();
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <xmega_RGBsensor_init>
	// main loop
	// *************************************************************************
	while (1) 
	{
		// RGB Sensor read:
		TWI_XFER_STATUS = xmega_read_RGB_values();
 3dc:	0e 94 a9 01 	call	0x352	; 0x352 <xmega_read_RGB_values>
 3e0:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <TWI_XFER_STATUS>
		// This next line provides a breakpoint for watching the RGB values
		temp1 = temp1+1;
 3e4:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <temp1>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <temp1>
 3ee:	f6 cf       	rjmp	.-20     	; 0x3dc <main+0xa>

000003f0 <__vector_46>:
						Interrupt Service Routines
*********************************************************************************
********************************************************************************/

ISR(TWIE_TWIM_vect)  // TWIE Master Interrupt vector.
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	0b b6       	in	r0, 0x3b	; 59
 3fc:	0f 92       	push	r0
 3fe:	2f 93       	push	r18
 400:	3f 93       	push	r19
 402:	4f 93       	push	r20
 404:	5f 93       	push	r21
 406:	6f 93       	push	r22
 408:	7f 93       	push	r23
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
 40e:	af 93       	push	r26
 410:	bf 93       	push	r27
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 416:	8d e0       	ldi	r24, 0x0D	; 13
 418:	90 e2       	ldi	r25, 0x20	; 32
 41a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <TWI_MasterInterruptHandler>
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0b be       	out	0x3b, r0	; 59
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <TWIE_initialization>:
						Functions
********************************************************************************/

void TWIE_initialization(void) {
	// Initialize PORTE pins 0 and 1 (SDA and SDC) for output
	PORTE.DIRSET = 0x03;
 444:	e0 e8       	ldi	r30, 0x80	; 128
 446:	f6 e0       	ldi	r31, 0x06	; 6
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	81 83       	std	Z+1, r24	; 0x01
	// Comment out the next two lines if you are using pull-up resistors on the circuit
	PORTE.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc; //Set the pull-up resistor
 44c:	88 e3       	ldi	r24, 0x38	; 56
 44e:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc; //Set the pull-up resistor
 450:	81 8b       	std	Z+17, r24	; 0x11
	
	// Initialize TWI master.
	TWI_MasterInit(&twiMaster,
 452:	2d ef       	ldi	r18, 0xFD	; 253
 454:	40 e4       	ldi	r20, 0x40	; 64
 456:	60 ea       	ldi	r22, 0xA0	; 160
 458:	74 e0       	ldi	r23, 0x04	; 4
 45a:	8d e0       	ldi	r24, 0x0D	; 13
 45c:	90 e2       	ldi	r25, 0x20	; 32
 45e:	0e 94 37 02 	call	0x46e	; 0x46e <TWI_MasterInit>
	&TWIE,
	TWI_MASTER_INTLVL_LO_gc,
	TWI_BAUDSETTING);

	// Enable LO interrupt level.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 462:	e0 ea       	ldi	r30, 0xA0	; 160
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	82 81       	ldd	r24, Z+2	; 0x02
 468:	81 60       	ori	r24, 0x01	; 1
 46a:	82 83       	std	Z+2, r24	; 0x02
 46c:	08 95       	ret

0000046e <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
 46e:	fc 01       	movw	r30, r24
 470:	60 83       	st	Z, r22
 472:	71 83       	std	Z+1, r23	; 0x01
 474:	48 63       	ori	r20, 0x38	; 56
 476:	db 01       	movw	r26, r22
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	4c 93       	st	X, r20
 47c:	a0 81       	ld	r26, Z
 47e:	b1 81       	ldd	r27, Z+1	; 0x01
 480:	15 96       	adiw	r26, 0x05	; 5
 482:	2c 93       	st	X, r18
 484:	01 90       	ld	r0, Z+
 486:	f0 81       	ld	r31, Z
 488:	e0 2d       	mov	r30, r0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	84 83       	std	Z+4, r24	; 0x04
 48e:	08 95       	ret

00000490 <TWI_MasterWriteRead>:
 490:	0f 93       	push	r16
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	fc 01       	movw	r30, r24
 498:	29 30       	cpi	r18, 0x09	; 9
 49a:	98 f5       	brcc	.+102    	; 0x502 <TWI_MasterWriteRead+0x72>
 49c:	09 30       	cpi	r16, 0x09	; 9
 49e:	98 f5       	brcc	.+102    	; 0x506 <TWI_MasterWriteRead+0x76>
 4a0:	87 89       	ldd	r24, Z+23	; 0x17
 4a2:	81 11       	cpse	r24, r1
 4a4:	32 c0       	rjmp	.+100    	; 0x50a <TWI_MasterWriteRead+0x7a>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	87 8b       	std	Z+23, r24	; 0x17
 4aa:	10 8e       	std	Z+24, r1	; 0x18
 4ac:	66 0f       	add	r22, r22
 4ae:	62 83       	std	Z+2, r22	; 0x02
 4b0:	22 23       	and	r18, r18
 4b2:	69 f0       	breq	.+26     	; 0x4ce <TWI_MasterWriteRead+0x3e>
 4b4:	a4 2f       	mov	r26, r20
 4b6:	b5 2f       	mov	r27, r21
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	8d 91       	ld	r24, X+
 4be:	ef 01       	movw	r28, r30
 4c0:	c4 0f       	add	r28, r20
 4c2:	d5 1f       	adc	r29, r21
 4c4:	8b 83       	std	Y+3, r24	; 0x03
 4c6:	4f 5f       	subi	r20, 0xFF	; 255
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ca:	42 17       	cp	r20, r18
 4cc:	b8 f3       	brcs	.-18     	; 0x4bc <TWI_MasterWriteRead+0x2c>
 4ce:	23 8b       	std	Z+19, r18	; 0x13
 4d0:	04 8b       	std	Z+20, r16	; 0x14
 4d2:	15 8a       	std	Z+21, r1	; 0x15
 4d4:	16 8a       	std	Z+22, r1	; 0x16
 4d6:	83 89       	ldd	r24, Z+19	; 0x13
 4d8:	88 23       	and	r24, r24
 4da:	41 f0       	breq	.+16     	; 0x4ec <TWI_MasterWriteRead+0x5c>
 4dc:	82 81       	ldd	r24, Z+2	; 0x02
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	01 90       	ld	r0, Z+
 4e2:	f0 81       	ld	r31, Z
 4e4:	e0 2d       	mov	r30, r0
 4e6:	86 83       	std	Z+6, r24	; 0x06
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	12 c0       	rjmp	.+36     	; 0x510 <TWI_MasterWriteRead+0x80>
 4ec:	84 89       	ldd	r24, Z+20	; 0x14
 4ee:	88 23       	and	r24, r24
 4f0:	71 f0       	breq	.+28     	; 0x50e <TWI_MasterWriteRead+0x7e>
 4f2:	82 81       	ldd	r24, Z+2	; 0x02
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	01 90       	ld	r0, Z+
 4f8:	f0 81       	ld	r31, Z
 4fa:	e0 2d       	mov	r30, r0
 4fc:	86 83       	std	Z+6, r24	; 0x06
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	07 c0       	rjmp	.+14     	; 0x510 <TWI_MasterWriteRead+0x80>
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	05 c0       	rjmp	.+10     	; 0x510 <TWI_MasterWriteRead+0x80>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	03 c0       	rjmp	.+6      	; 0x510 <TWI_MasterWriteRead+0x80>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	01 c0       	rjmp	.+2      	; 0x510 <TWI_MasterWriteRead+0x80>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 518:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 51a:	a0 81       	ld	r26, Z
 51c:	b1 81       	ldd	r27, Z+1	; 0x01
 51e:	14 96       	adiw	r26, 0x04	; 4
 520:	9c 91       	ld	r25, X
 522:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 524:	92 ff       	sbrs	r25, 2
 526:	03 c0       	rjmp	.+6      	; 0x52e <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	80 8f       	std	Z+24, r24	; 0x18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 532:	98 60       	ori	r25, 0x08	; 8
 534:	14 96       	adiw	r26, 0x04	; 4
 536:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 538:	17 8a       	std	Z+23, r1	; 0x17
 53a:	08 95       	ret

0000053c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 542:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 544:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 546:	a0 81       	ld	r26, Z
 548:	b1 81       	ldd	r27, Z+1	; 0x01
 54a:	14 96       	adiw	r26, 0x04	; 4
 54c:	8c 91       	ld	r24, X
 54e:	14 97       	sbiw	r26, 0x04	; 4
 550:	84 ff       	sbrs	r24, 4
 552:	07 c0       	rjmp	.+14     	; 0x562 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	13 96       	adiw	r26, 0x03	; 3
 558:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 55a:	85 e0       	ldi	r24, 0x05	; 5
 55c:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 55e:	17 8a       	std	Z+23, r1	; 0x17
 560:	1c c0       	rjmp	.+56     	; 0x59a <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 562:	85 89       	ldd	r24, Z+21	; 0x15
 564:	89 17       	cp	r24, r25
 566:	58 f4       	brcc	.+22     	; 0x57e <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 568:	85 89       	ldd	r24, Z+21	; 0x15
 56a:	ef 01       	movw	r28, r30
 56c:	c8 0f       	add	r28, r24
 56e:	d1 1d       	adc	r29, r1
 570:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 572:	17 96       	adiw	r26, 0x07	; 7
 574:	8c 93       	st	X, r24
		++twi->bytesWritten;
 576:	85 89       	ldd	r24, Z+21	; 0x15
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	85 8b       	std	Z+21, r24	; 0x15
 57c:	0e c0       	rjmp	.+28     	; 0x59a <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 57e:	86 89       	ldd	r24, Z+22	; 0x16
 580:	82 17       	cp	r24, r18
 582:	28 f4       	brcc	.+10     	; 0x58e <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 584:	82 81       	ldd	r24, Z+2	; 0x02
 586:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 588:	16 96       	adiw	r26, 0x06	; 6
 58a:	8c 93       	st	X, r24
 58c:	06 c0       	rjmp	.+12     	; 0x59a <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	13 96       	adiw	r26, 0x03	; 3
 592:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 598:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 5a0:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 5a2:	86 89       	ldd	r24, Z+22	; 0x16
 5a4:	88 30       	cpi	r24, 0x08	; 8
 5a6:	70 f4       	brcc	.+28     	; 0x5c4 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 5a8:	a0 81       	ld	r26, Z
 5aa:	b1 81       	ldd	r27, Z+1	; 0x01
 5ac:	17 96       	adiw	r26, 0x07	; 7
 5ae:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 5b0:	96 89       	ldd	r25, Z+22	; 0x16
 5b2:	df 01       	movw	r26, r30
 5b4:	a9 0f       	add	r26, r25
 5b6:	b1 1d       	adc	r27, r1
 5b8:	1b 96       	adiw	r26, 0x0b	; 11
 5ba:	8c 93       	st	X, r24
		twi->bytesRead++;
 5bc:	86 89       	ldd	r24, Z+22	; 0x16
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	86 8b       	std	Z+22, r24	; 0x16
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 5c4:	a0 81       	ld	r26, Z
 5c6:	b1 81       	ldd	r27, Z+1	; 0x01
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	13 96       	adiw	r26, 0x03	; 3
 5cc:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 5d2:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 5d4:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 5d6:	86 89       	ldd	r24, Z+22	; 0x16
 5d8:	89 17       	cp	r24, r25
 5da:	30 f4       	brcc	.+12     	; 0x5e8 <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 5dc:	01 90       	ld	r0, Z+
 5de:	f0 81       	ld	r31, Z
 5e0:	e0 2d       	mov	r30, r0
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	83 83       	std	Z+3, r24	; 0x03
 5e6:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 5e8:	a0 81       	ld	r26, Z
 5ea:	b1 81       	ldd	r27, Z+1	; 0x01
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	13 96       	adiw	r26, 0x03	; 3
 5f0:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 5f6:	17 8a       	std	Z+23, r1	; 0x17
 5f8:	08 95       	ret

000005fa <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 5fa:	dc 01       	movw	r26, r24
 5fc:	ed 91       	ld	r30, X+
 5fe:	fc 91       	ld	r31, X
 600:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 602:	32 2f       	mov	r19, r18
 604:	3c 70       	andi	r19, 0x0C	; 12
 606:	19 f0       	breq	.+6      	; 0x60e <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 608:	0e 94 8c 02 	call	0x518	; 0x518 <TWI_MasterArbitrationLostBusErrorHandler>
 60c:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 60e:	26 ff       	sbrs	r18, 6
 610:	03 c0       	rjmp	.+6      	; 0x618 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 612:	0e 94 9e 02 	call	0x53c	; 0x53c <TWI_MasterWriteHandler>
 616:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 618:	22 23       	and	r18, r18
 61a:	1c f4       	brge	.+6      	; 0x622 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 61c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TWI_MasterReadHandler>
 620:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 622:	26 e0       	ldi	r18, 0x06	; 6
 624:	fc 01       	movw	r30, r24
 626:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 628:	17 8a       	std	Z+23, r1	; 0x17
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
